/*
 * Copyright (C) 2016 macie
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package pl.gda.eti.pg.enrich_your_text.gui;

import java.awt.Component;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;
import pl.gda.eti.pg.enrich_your_text.database.WikiDatabase.WikiDatabaseTypes;
import pl.gda.eti.pg.enrich_your_text.database.mongodb.MongoWikiDB;
import pl.gda.eti.pg.enrich_your_text.database.mysql.MySQLWikiDB;
import pl.gda.eti.pg.enrich_your_text.models.Wikipedia;
import pl.gda.eti.pg.enrich_your_text.settings.Configuration;

/**
 *
 * @author macie
 */
public class DatabaseSettings extends javax.swing.JDialog {

    /**
     * Creates new form DatabaseSettings
     */
    public DatabaseSettings(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        databaseSettingsPanel = new javax.swing.JPanel();
        dbPortLabel = new javax.swing.JLabel();
        dbTypesList = new javax.swing.JComboBox();
        dbPasswordLabel = new javax.swing.JLabel();
        dbTypeLabel = new javax.swing.JLabel();
        dbUsernameTextField = new javax.swing.JTextField(Configuration.getDatabaseUsername());
        dbPasswordTextField = new javax.swing.JPasswordField(Configuration.getDatabasePassword());
        dbUsername = new javax.swing.JLabel();
        dbPortTextField = new javax.swing.JTextField(Configuration.getDatabasePort().toString());
        jPanel1 = new javax.swing.JPanel();
        testDBConnectionButton = new javax.swing.JButton();
        setToDefaultButton = new javax.swing.JButton();
        saveSettingsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Database Settings");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        databaseSettingsPanel.setLayout(new java.awt.GridBagLayout());

        dbPortLabel.setText("Port");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        databaseSettingsPanel.add(dbPortLabel, gridBagConstraints);

        dbTypesList.setModel(new javax.swing.DefaultComboBoxModel(WikiDatabaseTypes.names()));
        dbTypesList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbTypesListActionPerformed(evt);
            }
        });
        // Trigger action to set database port
        dbTypesListActionPerformed(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 5);
        databaseSettingsPanel.add(dbTypesList, gridBagConstraints);

        dbPasswordLabel.setText("Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        databaseSettingsPanel.add(dbPasswordLabel, gridBagConstraints);

        dbTypeLabel.setText("Database Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        databaseSettingsPanel.add(dbTypeLabel, gridBagConstraints);

        dbUsernameTextField.setEditable(false);
        dbUsernameTextField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 5);
        databaseSettingsPanel.add(dbUsernameTextField, gridBagConstraints);

        dbPasswordTextField.setEditable(false);
        dbPasswordTextField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 5);
        databaseSettingsPanel.add(dbPasswordTextField, gridBagConstraints);

        dbUsername.setText("Username");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        databaseSettingsPanel.add(dbUsername, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 5);
        databaseSettingsPanel.add(dbPortTextField, gridBagConstraints);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        testDBConnectionButton.setText("Test");
        testDBConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testDBConnectionButtonActionPerformed(evt);
            }
        });
        jPanel1.add(testDBConnectionButton);

        setToDefaultButton.setText("Set to default");
        setToDefaultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setToDefaultButtonActionPerformed(evt);
            }
        });
        jPanel1.add(setToDefaultButton);

        saveSettingsButton.setText("Save");
        saveSettingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveSettingsButtonActionPerformed(evt);
            }
        });
        jPanel1.add(saveSettingsButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        databaseSettingsPanel.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(databaseSettingsPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dbTypesListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbTypesListActionPerformed
        WikiDatabaseTypes currentDBType = WikiDatabaseTypes.values()[dbTypesList.getSelectedIndex()];
        if (currentDBType == WikiDatabaseTypes.MongoDB) {
            
        } else {
            JOptionPane.showMessageDialog(null, "MySQL support is not fully implemented yet - sorry!", "Warning", JOptionPane.WARNING_MESSAGE);
            dbTypesList.setSelectedIndex(WikiDatabaseTypes.MongoDB.ordinal());
        }
    }//GEN-LAST:event_dbTypesListActionPerformed
    
    private void testDBConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testDBConnectionButtonActionPerformed
        Thread dbConnectionThread = new Thread(new DatabaseConnectionThread(this));
        dbConnectionThread.start();
    }//GEN-LAST:event_testDBConnectionButtonActionPerformed

    private void saveSettingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveSettingsButtonActionPerformed
        Configuration.setDatabaseUsername(dbUsernameTextField.getText());
        Configuration.setDatabasePassword(new String(dbPasswordTextField.getPassword()));
        Configuration.setDatabasePort(Integer.parseInt(dbPortTextField.getText()));
        Configuration.currentDatabaseType = WikiDatabaseTypes.valueOf((String) dbTypesList.getSelectedItem());
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_saveSettingsButtonActionPerformed

    private void setToDefaultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setToDefaultButtonActionPerformed
        if (WikiDatabaseTypes.valueOf((String) dbTypesList.getSelectedItem()) == WikiDatabaseTypes.MongoDB) {
            dbPortTextField.setText(MongoWikiDB.DEFAULT_PORT.toString());
        } else {
            dbPortTextField.setText(MySQLWikiDB.DEFAULT_PORT.toString());
        }
        
    }//GEN-LAST:event_setToDefaultButtonActionPerformed

    private class DatabaseConnectionThread implements Runnable {

        Component parentComponent;

        public DatabaseConnectionThread(Component parentComponent) {
            this.parentComponent = parentComponent;
        }

        @Override
        public void run() {
            testDBConnectionButton.setEnabled(false);
            setToDefaultButton.setEnabled(false);
            saveSettingsButton.setEnabled(false);
            dbTypesList.setEnabled(false);
            dbPortTextField.setEnabled(false);
            if (Wikipedia.getInstance().connectToDatabase(Integer.parseInt(dbPortTextField.getText())) == false) {
                JOptionPane.showMessageDialog(parentComponent, "Couldn't connect to database! Please test database configuration.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(parentComponent, "Succesfully connected to database!", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
            testDBConnectionButton.setEnabled(true);
            setToDefaultButton.setEnabled(true);
            saveSettingsButton.setEnabled(true);
            dbTypesList.setEnabled(true);
            dbPortTextField.setEnabled(true);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel databaseSettingsPanel;
    private javax.swing.JLabel dbPasswordLabel;
    private javax.swing.JPasswordField dbPasswordTextField;
    private javax.swing.JLabel dbPortLabel;
    private javax.swing.JTextField dbPortTextField;
    private javax.swing.JLabel dbTypeLabel;
    private javax.swing.JComboBox dbTypesList;
    private javax.swing.JLabel dbUsername;
    private javax.swing.JTextField dbUsernameTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton saveSettingsButton;
    private javax.swing.JButton setToDefaultButton;
    private javax.swing.JButton testDBConnectionButton;
    // End of variables declaration//GEN-END:variables
}
